@点線
--track0:頂点数,2,16,2,1
--track1:長さ %,0,100,100
--track2:太さ px,0,100,4
--track3:間隔 px,0,1000,20
--dialog:アンカー,anchors={-50,0,50,0};ベジエ曲線/chk,bezier=0;移動平均曲線/chk,mvav=0;移動平均半径 px,mvavlen=50;色/col,color=0x000000;塗り長さ %,filllenfc=50;

local pathlib = require("path")

local numanc = obj.track0
obj.setanchor("anchors", numanc, "line")
obj.setoption("drawtarget","tempbuffer", obj.screen_w, obj.screen_h)

obj.load("figure", "四角形", color, 2)
local path
if bezier and bezier ~= 0 then
  path = pathlib.bezierpath(anchors)
elseif mvav and mvav ~= 0 then
  path = pathlib.mvavpath(anchors, mvavlen)
else
  path = pathlib.polypath(anchors)
end
path = pathlib.subpath(path, 0, obj.track1 / 100)
local conf = {
  width = obj.track2,
  patlen = obj.track3,
  filllenf = filllenfc / 100
}

path:draw(obj, conf)

obj.load("tempbuffer")


@矢印線
--track0:頂点数,2,16,2,1
--track1:長さ %,0,100,100
--track2:太さ px,0,100,4
--track3:大きさ %,0,1000,350,1
--dialog:アンカー,anchors={-50,0,50,0};ベジエ曲線/chk,bezier=0;移動平均曲線/chk,mvav=0;移動平均半径 px,mvavlen=50;色/col,color=0x000000;パターン長さ px,patlen=0;塗り長さ %,filllenfc=50;

local pathlib = require("path")

local numanc = obj.track0
obj.setanchor("anchors", numanc, "line")
obj.setoption("drawtarget","tempbuffer", obj.screen_w, obj.screen_h)

obj.load("figure", "四角形", color, 2)
local path
if bezier and bezier ~= 0 then
  path = pathlib.bezierpath(anchors)
elseif mvav and mvav ~= 0 then
  path = pathlib.mvavpath(anchors, mvavlen)
else
  path = pathlib.polypath(anchors)
end
path = pathlib.subpath(path, 0, obj.track1 / 100)
local conf = {
  width = obj.track2,
  patlen = patlen,
  filllenf = filllenfc / 100
}
path = path:draw(obj, conf)

if obj.track1 > 0 then
  local hsize = obj.track2 * obj.track3 / 100
  local x, y, dx, dy = path:getpt(1)
  local angle = math.deg(math.atan2(dx, -dy))
  obj.load("figure", "三角形", color, hsize)
  obj.draw(x, y, 0, 1, 1, 0, 0, angle)
end

obj.load("tempbuffer")


@道路線
--track0:頂点数,2,16,2,1
--track1:長さ %,0,100,100
--track2:太さ px,0,100,5
--dialog:アンカー,anchors={-50,0,50,0};ベジエ曲線/chk,bezier=0;移動平均曲線/chk,mvav=0;移動平均半径 px,mvavlen=50;色/col,color=0x404040;エッジ太さ %,edgewidthfc=15;中抜き濃さ %,offcolfc=10;

local pathlib = require("path")

local numanc = obj.track0
obj.setanchor("anchors", numanc, "line")
obj.setoption("drawtarget","tempbuffer", obj.screen_w, obj.screen_h)

obj.load("figure", "四角形", color, 2)
local path
if bezier and bezier ~= 0 then
  path = pathlib.bezierpath(anchors)
elseif mvav and mvav ~= 0 then
  path = pathlib.mvavpath(anchors, mvavlen)
else
  path = pathlib.polypath(anchors)
end
path = pathlib.subpath(path, 0, obj.track1 / 100)
local conf = {
  width = obj.track2 * (1 + edgewidthfc / 100 * 2)
}
path:draw(obj, conf)

local h, s, v = HSV(color)
s = s * offcolfc / 100
v = 100 - offcolfc * (100 - v) / 100
obj.load("figure", "四角形", HSV(h, s, v), 2)
conf = {
  width = obj.track2 * (1 - edgewidthfc / 100)
}
path:draw(obj, conf)

obj.load("tempbuffer")

@鉄道線(JR)
--track0:頂点数,2,16,2,1
--track1:長さ %,0,100,100
--track2:太さ px,0,100,5
--track3:間隔 px,0,1000,40
--dialog:アンカー,anchors={-50,0,50,0};ベジエ曲線/chk,bezier=0;移動平均曲線/chk,mvav=0;移動平均半径 px,mvavlen=50;色/col,color=0x404040;エッジ太さ %,edgewidthfc=15;中抜き濃さ %,offcolfc=10;塗り長さ %,filllenfc=50;

local pathlib = require("path")

local numanc = obj.track0
obj.setanchor("anchors", numanc, "line")
obj.setoption("drawtarget","tempbuffer", obj.screen_w, obj.screen_h)

obj.load("figure", "四角形", color, 2)
local path
if bezier and bezier ~= 0 then
  path = pathlib.bezierpath(anchors)
elseif mvav and mvav ~= 0 then
  path = pathlib.mvavpath(anchors, mvavlen)
else
  path = pathlib.polypath(anchors)
end
path = pathlib.subpath(path, 0, obj.track1 / 100)
local conf = {
  width = obj.track2 * (1 + edgewidthfc / 100 * 2)
}
path:draw(obj, conf)

local h, s, v = HSV(color)
s = s * offcolfc / 100
v = 100 - offcolfc * (100 - v) / 100
obj.load("figure", "四角形", HSV(h, s, v), 2)
conf = {
  width =  obj.track2 * (1 - edgewidthfc / 100),
  patlen = obj.track3,
  filllenf = 1 - filllenfc / 100,  
  pposf = filllenfc / 100,
}
path:draw(obj, conf)

obj.load("tempbuffer")
